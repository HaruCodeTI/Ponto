// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(EMPLOYEE)
  twoFactorSecret String? // Secret para 2FA
  twoFactorEnabled Boolean @default(false) // Se 2FA está ativo
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  company     Company?     @relation(fields: [companyId], references: [id])
  companyId   String?
  employee    Employee?
  timeRecords TimeRecord[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id            String        @id @default(cuid())
  name          String
  cnpj          String        @unique
  address       String
  latitude      Float?
  longitude     Float?
  operationType OperationType @default(PRESENCIAL)
  employeeCount Int
  plan          Plan          @default(BASIC)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  users       User[]
  employees   Employee[]
  timeRecords TimeRecord[]
  payments    Payment[]
  reportSchedules ReportSchedule[]
  reportFormatConfigs ReportFormatConfig[]
  advancedReportSchedules AdvancedReportSchedule[]
  subscriptions Subscription[]
}

model Employee {
  id               String       @id @default(cuid())
  cpf              String       @unique
  registration     String?      @unique // Matrícula
  pis              String?      @unique // PIS
  position         String
  salary           Float
  workSchedule     WorkSchedule @default(PRESENCIAL)
  toleranceMinutes Int          @default(15)
  bankHours        Float        @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @unique
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  timeRecords TimeRecord[]
  payments    Payment[]
  nfcCards    NFCCard[]
  biometricData BiometricData[]

  @@index([cpf])
  @@index([registration])
  @@index([pis])
}

model TimeRecord {
  id         String     @id @default(cuid())
  type       RecordType
  timestamp  DateTime   @default(now())
  latitude   Float?
  longitude  Float?
  ipAddress  String?
  deviceInfo String?
  photoUrl   String?
  nfcTag     String?
  hash       String     @unique // Para garantir imutabilidade
  integrityHash String  // Hash de integridade imutável
  integrityTimestamp DateTime // Timestamp criptográfico
  createdAt  DateTime   @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  // Relacionamento com ajustes
  adjustments TimeRecordAdjustment[]
}

model TimeRecordAdjustment {
  id                String   @id @default(cuid())
  originalRecordId  String   // ID do registro original
  originalRecord    TimeRecord @relation(fields: [originalRecordId], references: [id], onDelete: Cascade)
  
  // Dados do ajuste
  adjustedTimestamp DateTime // Novo timestamp
  adjustedType      RecordType? // Novo tipo (se aplicável)
  reason            String   // Justificativa obrigatória
  evidence          String?  // URL de evidência (documento, foto, etc.)
  
  // Aprovação
  approvedBy        String   // ID do usuário que aprovou
  approvedAt        DateTime @default(now())
  approvalStatus    AdjustmentStatus @default(PENDING)
  
  // Auditoria
  requestedBy       String   // ID do usuário que solicitou
  requestedAt       DateTime @default(now())
  companyId         String   // Empresa do registro
  
  // Campos de compliance
  complianceReason  String?  // Motivo específico de compliance
  legalBasis        String?  // Base legal para o ajuste
  retentionPeriod   Int      @default(1825) // 5 anos em dias
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([originalRecordId])
  @@index([companyId])
  @@index([requestedBy])
  @@index([approvedBy])
  @@index([approvalStatus])
}

model Payment {
  id         String   @id @default(cuid())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  month      String   // YYYY-MM
  amount     Float
  status     PaymentStatus @default(PENDING)
  paidAt     DateTime?
  payrollRef String? // Referência da folha/relatório
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReportSchedule {
  id             String   @id @default(cuid())
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String   @unique
  frequency      ReportFrequency @default(MONTHLY)
  dayOfMonth     Int?     // Para relatórios mensais (1-31)
  recipients     String   // Emails separados por vírgula
  format         ReportFormat @default(EXCEL)
  includeFilters String?  // JSON com filtros (position, workSchedule)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ReportFormatConfig {
  id             String   @id @default(cuid())
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  reportType     String   // Tipo do relatório (monthly, individual, etc.)
  defaultFormat  ReportFormat @default(EXCEL)
  enabledFormats String   // Formatos habilitados separados por vírgula
  customSettings String?  // JSON com configurações customizadas
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([companyId, reportType])
}

model AdvancedReportSchedule {
  id                   String   @id @default(cuid())
  company              Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  reportType           String   // Tipo do relatório
  scheduleType         String   // "simple" | "advanced"
  frequency            String   // "daily" | "weekly" | "monthly" | "custom"
  time                 String   // "HH:MM"
  daysOfWeek           String?  // JSON array [0-6] para weekly
  dayOfMonth           Int?     // 1-31 para monthly
  months               String?  // JSON array [0-11] para custom
  recipients           String   // Emails separados por vírgula
  format               ReportFormat @default(EXCEL)
  isActive             Boolean  @default(true)
  customCronExpression String?  // Expressão cron customizada
  description          String?  // Descrição do agendamento
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([companyId, reportType])
}

model Subscription {
  id                   String            @id @default(cuid())
  company              Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  plan                 Plan
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  trialEnd             DateTime?
  cancelAtPeriodEnd    Boolean           @default(false)
  employeeCount        Int
  monthlyAmount        Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@index([companyId, status])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model NFCCard {
  id         String   @id @default(cuid())
  cardNumber String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  isActive   Boolean  @default(true)
  lastUsed   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([cardNumber])
  @@index([employeeId])
}

model BiometricData {
  id         String   @id @default(cuid())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  type       String   // FINGERPRINT, FACE, VOICE
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([employeeId])
  @@index([type])
}

model AuditLog {
  id            String      @id @default(cuid())
  companyId     String      // Empresa
  userId        String?     // Usuário que executou a ação
  employeeId    String?     // Funcionário relacionado
  sessionId     String?     // Sessão do usuário
  action        String      // Ação executada
  category      AuditCategory // Categoria da ação
  severity      AuditSeverity // Severidade do evento
  status        AuditStatus // Status da ação
  resourceType  String?     // Tipo de recurso (User, Employee, etc.)
  resourceId    String?     // ID do recurso afetado
  oldValues     Json?       // Valores anteriores
  newValues     Json?       // Novos valores
  metadata      Json        // Metadados adicionais
  ipAddress     String?     // Endereço IP
  userAgent     String?     // User Agent do navegador
  location      String?     // Localização (se disponível)
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())

  @@index([companyId])
  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([severity])
  @@index([timestamp])
  @@index([resourceType, resourceId])
}

enum AuditCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  SYSTEM_CONFIG
  SECURITY
  COMPLIANCE
  BACKUP_RESTORE
  REPORT_GENERATION
  USER_MANAGEMENT
  EMPLOYEE_MANAGEMENT
  TIME_RECORD
  PAYROLL
  NOTIFICATION
  API_ACCESS
  FILE_OPERATION
  DATABASE_OPERATION
  NETWORK_ACCESS
  PRIVACY
  OTHER
}

enum AuditSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditStatus {
  SUCCESS
  FAILURE
  WARNING
  PENDING
  CANCELLED
}

model SecurityAlert {
  id            String           @id @default(cuid())
  companyId     String           // Empresa
  type          SecurityAlertType // Tipo de alerta
  severity      SecuritySeverity // Severidade
  status        AlertStatus      // Status do alerta
  title         String           // Título do alerta
  description   String           // Descrição detalhada
  source        String           // Fonte do alerta
  metadata      Json             // Metadados do alerta
  acknowledgedBy String?         // Usuário que reconheceu
  acknowledgedAt DateTime?       // Quando foi reconhecido
  resolvedBy    String?          // Usuário que resolveu
  resolvedAt    DateTime?        // Quando foi resolvido
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
}

enum SecurityAlertType {
  SUSPICIOUS_LOGIN
  MULTIPLE_FAILED_ATTEMPTS
  UNUSUAL_ACCESS_PATTERN
  DATA_EXPORT
  CONFIGURATION_CHANGE
  PRIVILEGE_ESCALATION
  DATA_BREACH_ATTEMPT
  MALWARE_DETECTION
  NETWORK_INTRUSION
  COMPLIANCE_VIOLATION
  AUDIT_FAILURE
  BACKUP_FAILURE
  SYSTEM_ERROR
  PERFORMANCE_ISSUE
  OTHER
}

enum SecuritySeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  OPEN
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  CLOSED
  FALSE_POSITIVE
}

model DataRetentionPolicy {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  dataType      String   // Tipo de dados
  retentionDays Int      // Dias de retenção
  isActive      Boolean  @default(true)
  description   String?  // Descrição da política
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([companyId, dataType])
  @@index([companyId])
  @@index([isActive])
}

model PrivacyConsent {
  id            String           @id @default(cuid())
  companyId     String           // Empresa
  userId        String           // Usuário
  consentType   ConsentType      // Tipo de consentimento
  status        ConsentStatus    // Status do consentimento
  grantedAt     DateTime?        // Quando foi concedido
  revokedAt     DateTime?        // Quando foi revogado
  ipAddress     String?          // IP do usuário
  userAgent     String?          // User Agent
  metadata      Json             // Metadados
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([companyId])
  @@index([userId])
  @@index([consentType])
  @@index([status])
  @@index([grantedAt])
}

enum ConsentType {
  DATA_COLLECTION
  DATA_PROCESSING
  DATA_SHARING
  MARKETING
  COOKIES
  ANALYTICS
  THIRD_PARTY
  LEGAL_BASIS
  OTHER
}

enum ConsentStatus {
  GRANTED
  DENIED
  REVOKED
  EXPIRED
  PENDING
}

model AuditReport {
  id            String        @id @default(cuid())
  companyId     String        // Empresa
  reportType    AuditReportType // Tipo de relatório
  period        String        // Período do relatório
  status        ReportStatus  // Status do relatório
  generatedBy   String        // Usuário que gerou
  generatedAt   DateTime      @default(now())
  filePath      String?       // Caminho do arquivo
  fileSize      Int?          // Tamanho do arquivo
  metadata      Json          // Metadados do relatório
  createdAt     DateTime      @default(now())

  @@index([companyId])
  @@index([reportType])
  @@index([period])
  @@index([status])
  @@index([generatedAt])
}

enum AuditReportType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
  COMPLIANCE
  SECURITY
  PRIVACY
  DATA_ACCESS
  USER_ACTIVITY
  SYSTEM_ACTIVITY
  OTHER
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum OperationType {
  PRESENCIAL
  HOME_OFFICE
  HYBRID
}

enum Plan {
  BASIC
  PROFESSIONAL
  PREMIUM
}

enum WorkSchedule {
  PRESENCIAL
  HOME_OFFICE
  HYBRID
}

enum RecordType {
  ENTRY
  EXIT
  BREAK_START
  BREAK_END
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}

enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ReportFormat {
  EXCEL
  CSV
  BOTH
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIAL
  EXPIRED
}

enum AdjustmentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum LogCategory {
  AUTHENTICATION
  AUTHORIZATION
  TIME_RECORD
  EMPLOYEE
  COMPANY
  SYSTEM
  NETWORK
  DATABASE
  VALIDATION
  NOTIFICATION
  BACKUP
  SYNC
  SECURITY
  PERFORMANCE
  COMPLIANCE
  OTHER
}

enum LogStatus {
  SUCCESS
  FAILED
  PENDING
  IN_PROGRESS
  CANCELLED
  TIMEOUT
  RETRY
}

enum SyncType {
  PUSH
  PULL
  BIDIRECTIONAL
  BATCH
  REALTIME
  BACKUP
  RESTORE
}

enum SyncStatus {
  IDLE
  RUNNING
  COMPLETED
  FAILED
  PAUSED
  SCHEDULED
}

enum EntityType {
  TIME_RECORD
  EMPLOYEE
  COMPANY
  NOTIFICATION
  AUDIT_LOG
  SYSTEM_LOG
  BACKUP
  CONFIGURATION
}

enum DeviceType {
  MOBILE
  DESKTOP
  TABLET
  TERMINAL
  UNKNOWN
}

model DataRedundancy {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  entityType  String   // Tipo de entidade (TimeRecord, SystemLog, etc.)
  entityId    String   // ID da entidade
  operation   String   // CREATE, UPDATE, DELETE
  status      RedundancyStatus
  
  // Dados da entidade
  entityData  Json     // Dados completos da entidade
  hash        String   // Hash dos dados para verificação de integridade
  
  // Informações de redundância
  primaryStorage   String   // Localização do armazenamento primário
  backupStorage    String   // Localização do backup
  replicationCount Int      @default(1) // Número de réplicas criadas
  
  // Status de cada réplica
  replicas         Json     // Array com status de cada réplica
  verificationHash String   // Hash para verificação de integridade
  
  // Metadados
  companyId        String   // Empresa relacionada
  userId           String?  // Usuário que realizou a operação
  sessionId        String?  // Sessão da operação
  
  // Compliance
  retentionPeriod  Int      @default(1825) // 5 anos em dias
  isComplianceRequired Boolean @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([timestamp])
  @@index([entityType])
  @@index([entityId])
  @@index([status])
  @@index([companyId])
}

model DataIntegrityCheck {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  checkType   IntegrityCheckType
  status      IntegrityCheckStatus
  
  // Escopo da verificação
  entityType  String?  // Tipo de entidade (opcional para verificações gerais)
  entityId    String?  // ID da entidade (opcional)
  dateRange   Json?    // Período verificado {startDate, endDate}
  
  // Resultados
  totalRecords    Int     @default(0)
  verifiedRecords Int     @default(0)
  corruptedRecords Int    @default(0)
  missingRecords  Int     @default(0)
  
  // Detalhes dos problemas
  issues          Json?   // Array com detalhes dos problemas encontrados
  fixes           Json?   // Array com correções aplicadas
  
  // Performance
  duration        Int?    // Duração da verificação em ms
  memoryUsage     Int?    // Uso de memória em MB
  
  // Metadados
  companyId       String? // Empresa relacionada (opcional para verificações globais)
  userId          String? // Usuário que iniciou a verificação
  
  // Compliance
  retentionPeriod Int     @default(1825) // 5 anos em dias
  isComplianceRequired Boolean @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([timestamp])
  @@index([checkType])
  @@index([status])
  @@index([entityType])
  @@index([companyId])
}

model BackupOperation {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  operationType BackupType
  status      BackupStatus
  
  // Escopo do backup
  entityTypes String[] // Tipos de entidades incluídos
  dateRange   Json?    // Período do backup {startDate, endDate}
  
  // Informações do arquivo
  fileName    String?  // Nome do arquivo de backup
  fileSize    Int?     // Tamanho em bytes
  fileHash    String?  // Hash do arquivo para verificação
  
  // Localizações
  primaryLocation   String   // Localização primária
  backupLocations   String[] // Localizações de backup
  
  // Metadados
  compressionRatio  Float?   // Taxa de compressão
  encryptionType    String?  // Tipo de criptografia usado
  retentionDays     Int      @default(1825) // Dias de retenção
  
  // Performance
  duration          Int?     // Duração em ms
  recordsProcessed  Int      @default(0)
  recordsBackedUp   Int      @default(0)
  
  // Metadados
  companyId         String?  // Empresa relacionada (opcional para backups globais)
  userId            String?  // Usuário que iniciou o backup
  
  // Compliance
  isComplianceRequired Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([timestamp])
  @@index([operationType])
  @@index([status])
  @@index([companyId])
}

model StorageHealth {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  storageType StorageType
  location    String   // Localização/identificação do storage
  
  // Status de saúde
  isAvailable Boolean  @default(true)
  isHealthy   Boolean  @default(true)
  
  // Métricas de performance
  responseTime Int?     // Tempo de resposta em ms
  throughput   Float?   // Throughput em MB/s
  errorRate    Float?   // Taxa de erro em %
  
  // Capacidade
  totalSpace   Int?     // Espaço total em bytes
  usedSpace    Int?     // Espaço usado em bytes
  freeSpace    Int?     // Espaço livre em bytes
  
  // Detalhes
  lastError    String?  // Último erro ocorrido
  errorCount   Int      @default(0) // Contador de erros
  
  // Metadados
  companyId    String?  // Empresa relacionada (opcional para storage global)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([timestamp])
  @@index([storageType])
  @@index([isAvailable])
  @@index([isHealthy])
  @@index([companyId])
}

enum RedundancyStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  VERIFIED
  CORRUPTED
}

enum IntegrityCheckType {
  HASH_VERIFICATION
  DATA_CONSISTENCY
  REFERENTIAL_INTEGRITY
  COMPLETE_SCAN
  INCREMENTAL_SCAN
  BACKUP_VERIFICATION
}

enum IntegrityCheckStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL_SUCCESS
  CORRUPTION_DETECTED
}

enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  SCHEMA_ONLY
  DATA_ONLY
}

enum BackupStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  RESTORING
}

enum StorageType {
  PRIMARY_DATABASE
  BACKUP_DATABASE
  FILE_STORAGE
  CLOUD_STORAGE
  ARCHIVE_STORAGE
  COMPLIANCE_STORAGE
}

model RestoreOperation {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  status        RestoreStatus
  backupId      String   // Referência ao BackupOperation
  entityTypes   String[] // Entidades restauradas
  dateRange     Json?    // Período restaurado {startDate, endDate}
  fileName      String?  // Arquivo de origem
  fileHash      String?  // Hash do arquivo
  restoredCount Int      @default(0)
  error         String?  // Erro, se houver
  duration      Int?     // Duração em ms
  companyId     String?  // Empresa relacionada
  userId        String?  // Usuário que iniciou
  isComplianceRequired Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([timestamp])
  @@index([status])
  @@index([companyId])
}

enum RestoreStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  CANCELLED
  VERIFIED
}

model RetentionPolicy {
  id                String   @id @default(cuid())
  name              String   // Nome da política
  description       String?  // Descrição da política
  entityType        String   // Tipo de entidade (TimeRecord, SystemLog, etc.)
  retentionPeriod   Int      // Período de retenção em dias
  isActive          Boolean  @default(true)
  companyId         String?  // Empresa específica (null = global)
  createdBy         String   // Usuário que criou
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([entityType])
  @@index([companyId])
  @@index([isActive])
}

model DataPurge {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  policyId      String   // Referência à política
  entityType    String   // Tipo de entidade
  status        PurgeStatus
  recordsCount  Int      @default(0) // Número de registros processados
  purgedCount   Int      @default(0) // Número de registros expurgados
  error         String?  // Erro, se houver
  duration      Int?     // Duração em ms
  companyId     String?  // Empresa relacionada
  executedBy    String?  // Usuário que executou
  isComplianceRequired Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([timestamp])
  @@index([policyId])
  @@index([entityType])
  @@index([status])
  @@index([companyId])
}

enum PurgeStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
  CANCELLED
}

model TimeRecordReceipt {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  timeRecordId  String   // Referência ao registro de ponto
  employeeId    String   // Funcionário
  companyId     String   // Empresa
  receiptType   ReceiptType // Tipo de comprovante
  receiptData   Json     // Dados do comprovante (estrutura completa)
  hash          String   // Hash para verificação de integridade
  qrCode        String?  // Código QR para validação
  isVerified    Boolean  @default(false) // Se foi verificado
  verifiedAt    DateTime? // Quando foi verificado
  verifiedBy    String?  // Quem verificou
  isComplianceRequired Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([timestamp])
  @@index([timeRecordId])
  @@index([employeeId])
  @@index([companyId])
  @@index([receiptType])
  @@index([isVerified])
}

enum ReceiptType {
  CLOCK_IN
  CLOCK_OUT
  BREAK_START
  BREAK_END
  ADJUSTMENT
  VERIFICATION
}

model TimeSheetMirror {
  id            String   @id @default(cuid())
  employeeId    String   // Funcionário
  companyId     String   // Empresa
  month         Int      // Mês (1-12)
  year          Int      // Ano
  status        MirrorStatus // Status do espelho
  totalWorkHours Decimal  @db.Decimal(10, 2) // Total de horas trabalhadas
  totalBreakHours Decimal @db.Decimal(10, 2) // Total de horas de intervalo
  totalOvertimeHours Decimal @db.Decimal(10, 2) // Total de horas extras
  totalAbsences Int      // Total de faltas
  totalDelays   Int      // Total de atrasos
  workDays      Int      // Dias trabalhados
  totalDays     Int      // Total de dias no mês
  mirrorData    Json     // Dados completos do espelho (estrutura detalhada)
  adjustments   Json?    // Ajustes aplicados
  notes         String?  // Observações
  approvedBy    String?  // Quem aprovou
  approvedAt    DateTime? // Quando foi aprovado
  isComplianceRequired Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([employeeId, month, year])
  @@index([employeeId])
  @@index([companyId])
  @@index([month, year])
  @@index([status])
  @@index([approvedAt])
}

enum MirrorStatus {
  DRAFT
  GENERATED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  EXPORTED
}

model AFDExport {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  employeeId    String?  // Funcionário específico (opcional)
  startDate     DateTime // Data inicial do período
  endDate       DateTime // Data final do período
  fileName      String   // Nome do arquivo gerado
  filePath      String   // Caminho do arquivo no servidor
  fileSize      Int      // Tamanho do arquivo em bytes
  recordCount   Int      // Número de registros exportados
  status        AFDStatus // Status da exportação
  afdVersion    String   // Versão do formato AFD
  checksum      String   // Checksum do arquivo para validação
  metadata      Json     // Metadados da exportação
  isComplianceRequired Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([employeeId])
  @@index([startDate, endDate])
  @@index([status])
  @@index([createdAt])
}

enum AFDStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

model Notification {
  id          String           @id @default(cuid())
  companyId   String           // Empresa
  userId      String?          // Usuário específico (opcional)
  employeeId  String?          // Funcionário específico (opcional)
  type        NotificationType // Tipo da notificação
  title       String           // Título da notificação
  message     String           // Mensagem da notificação
  priority    NotificationPriority // Prioridade
  category    String           // Categoria (ponto, relatório, sistema, etc.)
  metadata    Json?            // Dados adicionais
  isRead      Boolean          @default(false) // Se foi lida
  isArchived  Boolean          @default(false) // Se foi arquivada
  readAt      DateTime?        // Quando foi lida
  expiresAt   DateTime?        // Data de expiração
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([companyId])
  @@index([userId])
  @@index([employeeId])
  @@index([type])
  @@index([priority])
  @@index([isRead])
  @@index([createdAt])
  @@index([expiresAt])
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ALERT
  REMINDER
  APPROVAL
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  companyId             String   // Empresa
  userId                String?  // Usuário específico (opcional)
  employeeId            String?  // Funcionário específico (opcional)
  emailEnabled          Boolean  @default(true)
  pushEnabled           Boolean  @default(true)
  smsEnabled            Boolean  @default(false)
  inAppEnabled          Boolean  @default(true)
  categories            Json     // Categorias habilitadas
  quietHours            Json?    // Horário silencioso
  frequency             NotificationFrequency
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([companyId, userId, employeeId])
  @@index([companyId])
  @@index([userId])
  @@index([employeeId])
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

model Backup {
  id            String      @id @default(cuid())
  companyId     String      // Empresa
  type          BackupType  // Tipo de backup
  status        BackupStatus // Status do backup
  fileName      String      // Nome do arquivo de backup
  filePath      String      // Caminho do arquivo no servidor
  fileSize      Int         // Tamanho do arquivo em bytes
  checksum      String      // Checksum do arquivo para validação
  metadata      Json        // Metadados do backup
  retentionDays Int         @default(30) // Dias de retenção
  expiresAt     DateTime    // Data de expiração
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
}

model BackupSchedule {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  type          BackupType // Tipo de backup
  frequency     BackupFrequency // Frequência
  time          String   // Horário (HH:mm)
  days          Int[]    // Dias da semana (0-6)
  isActive      Boolean  @default(true)
  retentionDays Int      @default(30)
  lastRun       DateTime? // Última execução
  nextRun       DateTime? // Próxima execução
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([companyId, type])
  @@index([companyId])
  @@index([isActive])
  @@index([nextRun])
}

enum BackupFrequency {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

model RestoreJob {
  id            String        @id @default(cuid())
  companyId     String        // Empresa
  backupId      String        // Backup usado para restauração
  status        RestoreStatus // Status da restauração
  progress      Int           @default(0) // Progresso (0-100)
  startedAt     DateTime      @default(now())
  completedAt   DateTime?     // Quando foi concluída
  errorMessage  String?       // Mensagem de erro se falhou
  metadata      Json          // Metadados da restauração
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([companyId])
  @@index([backupId])
  @@index([status])
  @@index([startedAt])
}

model ExecutiveDashboard {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do dashboard
  description   String?  // Descrição
  isDefault     Boolean  @default(false) // Dashboard padrão
  isPublic      Boolean  @default(false) // Dashboard público
  layout        Json     // Layout dos widgets
  filters       Json     // Filtros aplicados
  refreshInterval Int?   // Intervalo de atualização (minutos)
  createdBy     String   // Usuário que criou
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  widgets       DashboardWidget[]

  @@index([companyId])
  @@index([createdBy])
  @@index([isDefault])
}

model DashboardWidget {
  id            String   @id @default(cuid())
  dashboardId   String   // Dashboard
  widgetType    WidgetType // Tipo do widget
  title         String   // Título do widget
  description   String?  // Descrição
  position      Json     // Posição no layout
  size          Json     // Tamanho do widget
  config        Json     // Configuração específica
  dataSource    String   // Fonte de dados
  refreshInterval Int?   // Intervalo de atualização
  isVisible     Boolean  @default(true)
  order         Int      // Ordem de exibição
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  dashboard     ExecutiveDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@index([widgetType])
  @@index([order])
}

enum WidgetType {
  KPI_CARD
  LINE_CHART
  BAR_CHART
  PIE_CHART
  TABLE
  GAUGE
  HEATMAP
  FUNNEL
  SCATTER_PLOT
  AREA_CHART
  METRIC_GRID
  ALERT_LIST
  ACTIVITY_FEED
  CUSTOM_HTML
}

model BusinessKPI {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do KPI
  description   String?  // Descrição
  category      KPICategory // Categoria
  formula       String   // Fórmula de cálculo
  unit          String?  // Unidade de medida
  target        Float?   // Meta
  threshold     Float?   // Limite de alerta
  dataSource    String   // Fonte de dados
  refreshInterval Int    @default(60) // Intervalo de atualização (minutos)
  isActive      Boolean  @default(true)
  isVisible     Boolean  @default(true)
  metadata      Json     // Metadados adicionais
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  values        KPIValue[]

  @@index([companyId])
  @@index([category])
  @@index([isActive])
}

enum KPICategory {
  PRODUCTIVITY
  ATTENDANCE
  OVERTIME
  COMPLIANCE
  SECURITY
  FINANCIAL
  OPERATIONAL
  CUSTOMER
  EMPLOYEE
  SYSTEM
}

model KPIValue {
  id            String   @id @default(cuid())
  kpiId         String   // KPI
  value         Float    // Valor calculado
  target        Float?   // Meta no momento
  threshold     Float?   // Limite no momento
  period        String   // Período (YYYY-MM, YYYY-WW, etc.)
  timestamp     DateTime @default(now())
  metadata      Json     // Metadados do cálculo
  createdAt     DateTime @default(now())

  kpi           BusinessKPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@index([kpiId])
  @@index([period])
  @@index([timestamp])
}

model ReportTemplate {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do template
  description   String?  // Descrição
  type          ReportType // Tipo de relatório
  format        ReportFormat // Formato de saída
  schedule      Json?    // Agendamento
  config        Json     // Configuração do relatório
  isActive      Boolean  @default(true)
  createdBy     String   // Usuário que criou
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reports       GeneratedReport[]

  @@index([companyId])
  @@index([type])
  @@index([isActive])
}

enum ReportType {
  DAILY_SUMMARY
  WEEKLY_REPORT
  MONTHLY_REPORT
  QUARTERLY_REPORT
  YEARLY_REPORT
  CUSTOM_PERIOD
  REAL_TIME
  AD_HOC
  COMPLIANCE
  AUDIT
  FINANCIAL
  OPERATIONAL
}

model GeneratedReport {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  templateId    String?  // Template usado
  name          String   // Nome do relatório
  type          ReportType // Tipo
  format        ReportFormat // Formato
  status        ReportStatus // Status
  filePath      String?  // Caminho do arquivo
  fileSize      Int?     // Tamanho do arquivo
  downloadUrl   String?  // URL de download
  metadata      Json     // Metadados
  generatedBy   String   // Usuário que gerou
  generatedAt   DateTime @default(now())
  expiresAt     DateTime? // Data de expiração
  createdAt     DateTime @default(now())

  template      ReportTemplate? @relation(fields: [templateId], references: [id])

  @@index([companyId])
  @@index([templateId])
  @@index([type])
  @@index([status])
  @@index([generatedAt])
}

model DataExport {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome da exportação
  description   String?  // Descrição
  dataSource    String   // Fonte de dados
  filters       Json     // Filtros aplicados
  columns       String[] // Colunas selecionadas
  format        ExportFormat // Formato
  status        ExportStatus // Status
  filePath      String?  // Caminho do arquivo
  fileSize      Int?     // Tamanho do arquivo
  downloadUrl   String?  // URL de download
  metadata      Json     // Metadados
  requestedBy   String   // Usuário que solicitou
  requestedAt   DateTime @default(now())
  completedAt   DateTime? // Quando foi concluída
  expiresAt     DateTime? // Data de expiração
  createdAt     DateTime @default(now())

  @@index([companyId])
  @@index([status])
  @@index([requestedAt])
}

enum ExportFormat {
  CSV
  EXCEL
  JSON
  XML
  SQL
  CUSTOM
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}

model BIIntegration {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome da integração
  type          BIType   // Tipo de BI
  config        Json     // Configuração
  isActive      Boolean  @default(true)
  lastSync      DateTime? // Última sincronização
  syncInterval  Int      @default(60) // Intervalo de sincronização (minutos)
  metadata      Json     // Metadados
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([isActive])
}

enum BIType {
  POWER_BI
  TABLEAU
  QLIK
  LOOKER
  METABASE
  GRAFANA
  CUSTOM
}

model ExternalAPI {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome da integração
  description   String?  // Descrição
  provider      String   // Provedor (ex: "stripe", "google", "microsoft")
  apiType       APIType  // Tipo de API
  baseUrl       String   // URL base da API
  version       String   // Versão da API
  config        Json     // Configuração da API
  credentials   Json     // Credenciais (criptografadas)
  isActive      Boolean  @default(true)
  rateLimit     Json?    // Limites de taxa
  lastSync      DateTime? // Última sincronização
  syncInterval  Int      @default(60) // Intervalo de sincronização (minutos)
  metadata      Json     // Metadados
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  endpoints     APIEndpoint[]
  requests      APIRequest[]
  syncs         DataSync[]
  rateLimits    APIRateLimit[]
  monitoring    APIMonitoring[]
  logs          IntegrationLog[]

  @@index([companyId])
  @@index([provider])
  @@index([isActive])
}

enum APIType {
  REST
  GRAPHQL
  SOAP
  WEBHOOK
  OAUTH
  API_KEY
  BASIC_AUTH
  JWT
  CUSTOM
}

model APIEndpoint {
  id            String   @id @default(cuid())
  apiId         String   // API externa
  name          String   // Nome do endpoint
  path          String   // Caminho do endpoint
  method        HTTPMethod // Método HTTP
  description   String?  // Descrição
  parameters    Json     // Parâmetros esperados
  headers       Json     // Headers necessários
  response      Json     // Estrutura da resposta
  isActive      Boolean  @default(true)
  rateLimit     Json?    // Limite específico do endpoint
  timeout       Int      @default(30000) // Timeout em ms
  retryConfig   Json     // Configuração de retry
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  api           ExternalAPI @relation(fields: [apiId], references: [id], onDelete: Cascade)
  requests      APIRequest[]

  @@index([apiId])
  @@index([method])
  @@index([isActive])
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
}

model APIRequest {
  id            String   @id @default(cuid())
  apiId         String   // API externa
  endpointId    String?  // Endpoint específico
  method        HTTPMethod // Método HTTP
  url           String   // URL completa
  headers       Json     // Headers enviados
  body          Json?    // Corpo da requisição
  status        RequestStatus // Status da requisição
  responseCode  Int?     // Código de resposta HTTP
  responseBody  Json?    // Corpo da resposta
  errorMessage  String?  // Mensagem de erro
  duration      Int?     // Duração em ms
  retryCount    Int      @default(0) // Número de tentativas
  metadata      Json     // Metadados
  requestedAt   DateTime @default(now())
  completedAt   DateTime? // Quando foi concluída
  createdAt     DateTime @default(now())

  api           ExternalAPI @relation(fields: [apiId], references: [id], onDelete: Cascade)
  endpoint      APIEndpoint? @relation(fields: [endpointId], references: [id])

  @@index([apiId])
  @@index([endpointId])
  @@index([status])
  @@index([requestedAt])
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  TIMEOUT
  CANCELLED
  RETRYING
}

model Webhook {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do webhook
  description   String?  // Descrição
  url           String   // URL de destino
  events        String[] // Eventos que disparam o webhook
  secret        String   // Secret para validação
  headers       Json     // Headers customizados
  isActive      Boolean  @default(true)
  retryConfig   Json     // Configuração de retry
  timeout       Int      @default(30000) // Timeout em ms
  metadata      Json     // Metadados
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  deliveries    WebhookDelivery[]
  logs          IntegrationLog[]

  @@index([companyId])
  @@index([isActive])
}

model WebhookDelivery {
  id            String   @id @default(cuid())
  webhookId     String   // Webhook
  event         String   // Evento que disparou
  payload       Json     // Payload enviado
  status        DeliveryStatus // Status da entrega
  responseCode  Int?     // Código de resposta HTTP
  responseBody  String?  // Corpo da resposta
  errorMessage  String?  // Mensagem de erro
  duration      Int?     // Duração em ms
  retryCount    Int      @default(0) // Número de tentativas
  deliveredAt   DateTime? // Quando foi entregue
  createdAt     DateTime @default(now())

  webhook       Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([status])
  @@index([createdAt])
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  RETRYING
  CANCELLED
}

model DataSync {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  apiId         String   // API externa
  name          String   // Nome da sincronização
  description   String?  // Descrição
  sourceTable   String   // Tabela de origem
  targetTable   String   // Tabela de destino
  mapping       Json     // Mapeamento de campos
  schedule      Json     // Agendamento
  lastSync      DateTime? // Última sincronização
  nextSync      DateTime? // Próxima sincronização
  status        SyncStatus // Status da sincronização
  recordsSynced Int      @default(0) // Registros sincronizados
  errorCount    Int      @default(0) // Contagem de erros
  isActive      Boolean  @default(true)
  metadata      Json     // Metadados
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  api           ExternalAPI @relation(fields: [apiId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([apiId])
  @@index([status])
  @@index([isActive])
}

model APIRateLimit {
  id            String   @id @default(cuid())
  apiId         String   // API externa
  window        String   // Janela de tempo (ex: "1m", "1h", "1d")
  limit         Int      // Limite de requisições
  remaining     Int      // Requisições restantes
  resetAt       DateTime // Quando o limite é resetado
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  api           ExternalAPI @relation(fields: [apiId], references: [id], onDelete: Cascade)

  @@index([apiId])
  @@index([resetAt])
}

model APIMonitoring {
  id            String   @id @default(cuid())
  apiId         String   // API externa
  metric        String   // Métrica (ex: "response_time", "error_rate", "availability")
  value         Float    // Valor da métrica
  timestamp     DateTime @default(now())
  metadata      Json     // Metadados adicionais

  api           ExternalAPI @relation(fields: [apiId], references: [id], onDelete: Cascade)

  @@index([apiId])
  @@index([metric])
  @@index([timestamp])
}

model IntegrationLog {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  apiId         String?  // API externa (opcional)
  webhookId     String?  // Webhook (opcional)
  level         LogLevel // Nível do log
  message       String   // Mensagem
  details       Json?    // Detalhes adicionais
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())

  api           ExternalAPI? @relation(fields: [apiId], references: [id])
  webhook       Webhook? @relation(fields: [webhookId], references: [id])

  @@index([companyId])
  @@index([apiId])
  @@index([webhookId])
  @@index([level])
  @@index([timestamp])
}

model AIModel {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do modelo
  description   String?  // Descrição
  type          ModelType // Tipo de modelo
  version       String   // Versão do modelo
  status        ModelStatus // Status do modelo
  config        Json     // Configuração do modelo
  metadata      Json     // Metadados do modelo
  accuracy      Float?   // Precisão do modelo
  lastTrained   DateTime? // Último treinamento
  nextTraining  DateTime? // Próximo treinamento
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  trainings     ModelTraining[]
  predictions   Prediction[]
  anomalies     AnomalyDetection[]
  insights      AIInsight[]
  performance   MLPerformance[]

  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([isActive])
}

enum ModelType {
  ANOMALY_DETECTION
  PREDICTIVE_ANALYTICS
  PATTERN_RECOGNITION
  CLASSIFICATION
  REGRESSION
  CLUSTERING
  RECOMMENDATION
  NLP
  COMPUTER_VISION
  TIME_SERIES
  FRAUD_DETECTION
  CUSTOM
}

enum ModelStatus {
  DRAFT
  TRAINING
  ACTIVE
  INACTIVE
  DEPRECATED
  ERROR
  UPDATING
}

model ModelTraining {
  id            String   @id @default(cuid())
  modelId       String   // Modelo
  version       String   // Versão do treinamento
  status        TrainingStatus // Status do treinamento
  config        Json     // Configuração do treinamento
  dataset       Json     // Dataset usado
  metrics       Json     // Métricas de performance
  artifacts     Json     // Artefatos gerados
  startTime     DateTime @default(now())
  endTime       DateTime? // Quando terminou
  duration      Int?     // Duração em segundos
  errorMessage  String?  // Mensagem de erro
  createdBy     String   // Usuário que iniciou
  createdAt     DateTime @default(now())

  model         AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([status])
  @@index([startTime])
}

enum TrainingStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  VALIDATING
}

model Prediction {
  id            String   @id @default(cuid())
  modelId       String   // Modelo usado
  input         Json     // Dados de entrada
  output        Json     // Predição gerada
  confidence    Float    // Confiança da predição
  status        PredictionStatus // Status da predição
  metadata      Json     // Metadados
  processingTime Int     // Tempo de processamento (ms)
  createdAt     DateTime @default(now())

  model         AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([status])
  @@index([createdAt])
}

enum PredictionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model AnomalyDetection {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  modelId       String   // Modelo usado
  dataSource    String   // Fonte de dados
  anomalyType   AnomalyType // Tipo de anomalia
  severity      AnomalySeverity // Severidade
  description   String   // Descrição da anomalia
  data          Json     // Dados da anomalia
  score         Float    // Score de anomalia (0-1)
  threshold     Float    // Threshold usado
  isResolved    Boolean  @default(false)
  resolvedAt    DateTime? // Quando foi resolvida
  resolvedBy    String?  // Quem resolveu
  resolution    String?  // Como foi resolvida
  createdAt     DateTime @default(now())

  model         AIModel @relation(fields: [modelId], references: [id])

  @@index([companyId])
  @@index([modelId])
  @@index([anomalyType])
  @@index([severity])
  @@index([isResolved])
  @@index([createdAt])
}

enum AnomalyType {
  TIME_RECORD_ANOMALY
  LOCATION_ANOMALY
  DEVICE_ANOMALY
  BEHAVIOR_ANOMALY
  PATTERN_ANOMALY
  SYSTEM_ANOMALY
  SECURITY_ANOMALY
  PERFORMANCE_ANOMALY
  CUSTOM
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model MLDataset {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do dataset
  description   String?  // Descrição
  type          DatasetType // Tipo de dataset
  source        String   // Fonte dos dados
  schema        Json     // Schema dos dados
  size          Int      // Tamanho do dataset
  records       Int      // Número de registros
  quality       Json     // Métricas de qualidade
  isActive      Boolean  @default(true)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([isActive])
}

enum DatasetType {
  TRAINING
  VALIDATION
  TEST
  PRODUCTION
  CUSTOM
}

model MLFeature {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome da feature
  description   String?  // Descrição
  type          FeatureType // Tipo de feature
  dataType      String   // Tipo de dados
  source        String   // Fonte da feature
  transformation Json    // Transformação aplicada
  importance    Float?   // Importância da feature
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([isActive])
}

enum FeatureType {
  NUMERICAL
  CATEGORICAL
  TEMPORAL
  TEXT
  BOOLEAN
  COMPLEX
  CUSTOM
}

model MLExperiment {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome do experimento
  description   String?  // Descrição
  objective     String   // Objetivo do experimento
  hypothesis    String?  // Hipótese
  config        Json     // Configuração do experimento
  status        ExperimentStatus // Status do experimento
  results       Json?    // Resultados
  conclusion    String?  // Conclusão
  startTime     DateTime @default(now())
  endTime       DateTime? // Quando terminou
  duration      Int?     // Duração em segundos
  createdBy     String   // Usuário que criou
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([status])
  @@index([startTime])
}

enum ExperimentStatus {
  PLANNED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  ANALYZING
}

model AIInsight {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  modelId       String?  // Modelo que gerou
  type          InsightType // Tipo de insight
  title         String   // Título do insight
  description   String   // Descrição
  data          Json     // Dados do insight
  confidence    Float    // Confiança (0-1)
  impact        InsightImpact // Impacto
  recommendations Json   // Recomendações
  isRead        Boolean  @default(false)
  isActioned    Boolean  @default(false)
  actionedAt    DateTime? // Quando foi acionado
  actionedBy    String?  // Quem acionou
  createdAt     DateTime @default(now())

  model         AIModel? @relation(fields: [modelId], references: [id])

  @@index([companyId])
  @@index([modelId])
  @@index([type])
  @@index([impact])
  @@index([isRead])
  @@index([createdAt])
}

enum InsightType {
  TREND_ANALYSIS
  PATTERN_DISCOVERY
  ANOMALY_INSIGHT
  PREDICTION_INSIGHT
  OPTIMIZATION
  RISK_ALERT
  OPPORTUNITY
  PERFORMANCE_INSIGHT
  CUSTOM
}

enum InsightImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model MLPerformance {
  id            String   @id @default(cuid())
  modelId       String   // Modelo
  metric        String   // Métrica
  value         Float    // Valor da métrica
  timestamp     DateTime @default(now())
  metadata      Json     // Metadados

  model         AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@index([metric])
  @@index([timestamp])
}

model AIConfig {
  id            String   @id @default(cuid())
  companyId     String   // Empresa
  name          String   // Nome da configuração
  description   String?  // Descrição
  config        Json     // Configuração
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([isActive])
}
